$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 # clk $end
  $var wire 1 $ rst_n $end
  $var wire 1 % enable $end
  $var wire 8 & seed [7:0] $end
  $var wire 8 ' tap_pattern [7:0] $end
  $var wire 1 ( load_seed $end
  $var wire 1 ) serial_out $end
  $var wire 8 * parallel_out [7:0] $end
  $scope module configurable_lfsr $end
   $var wire 32 . WIDTH [31:0] $end
   $var wire 1 # clk $end
   $var wire 1 $ rst_n $end
   $var wire 1 % enable $end
   $var wire 8 & seed [7:0] $end
   $var wire 8 ' tap_pattern [7:0] $end
   $var wire 1 ( load_seed $end
   $var wire 1 ) serial_out $end
   $var wire 8 * parallel_out [7:0] $end
   $var wire 8 + shift_reg [7:0] $end
   $var wire 1 , feedback $end
   $scope module multi_bit $end
    $var wire 8 - tapped_bits [7:0] $end
    $var wire 1 , xor_result $end
    $var wire 32 / j [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
0%
b00000000 &
b00000000 '
0(
0)
b00000000 *
b00000000 +
0,
b00000000 -
b00000000000000000000000000001000 .
b00000000000000000000000000001000 /
#1
1#
#2
0#
1$
#3
1#
#4
0#
b00000001 &
b00110001 '
1(
#5
1#
1)
b00000001 *
b00000001 +
1,
b00000001 -
#6
0#
1%
0(
#7
1#
0)
b10000000 *
b10000000 +
0,
b00000000 -
#8
0#
#9
1#
b01000000 *
b01000000 +
#10
0#
#11
1#
b00100000 *
b00100000 +
1,
b00100000 -
#12
0#
#13
1#
b10010000 *
b10010000 +
b00010000 -
#14
0#
#15
1#
b11001000 *
b11001000 +
0,
b00000000 -
#16
0#
#17
1#
b01100100 *
b01100100 +
1,
b00100000 -
#18
0#
#19
1#
b10110010 *
b10110010 +
0,
b00110000 -
#20
0#
#21
1#
1)
b01011001 *
b01011001 +
b00010001 -
#22
0#
#23
1#
0)
b00101100 *
b00101100 +
1,
b00100000 -
#24
0#
#25
1#
b10010110 *
b10010110 +
b00010000 -
#26
0#
#27
1#
1)
b11001011 *
b11001011 +
b00000001 -
#28
0#
#29
1#
b11100101 *
b11100101 +
0,
b00100001 -
#30
0#
#31
1#
0)
b01110010 *
b01110010 +
b00110000 -
#32
0#
#33
1#
1)
b00111001 *
b00111001 +
1,
b00110001 -
#34
0#
#35
1#
0)
b10011100 *
b10011100 +
b00010000 -
#36
0#
#37
1#
b11001110 *
b11001110 +
0,
b00000000 -
#38
0#
#39
1#
1)
b01100111 *
b01100111 +
b00100001 -
#40
0#
#41
1#
b00110011 *
b00110011 +
1,
b00110001 -
#42
0#
#43
1#
b10011001 *
b10011001 +
0,
b00010001 -
#44
0#
#45
1#
0)
b01001100 *
b01001100 +
b00000000 -
#46
0#
#47
1#
b00100110 *
b00100110 +
1,
b00100000 -
#48
0#
#49
1#
1)
b10010011 *
b10010011 +
0,
b00010001 -
#50
0#
#51
1#
b01001001 *
b01001001 +
1,
b00000001 -
#52
0#
#53
1#
0)
b10100100 *
b10100100 +
b00100000 -
#54
0#
#55
1#
b11010010 *
b11010010 +
b00010000 -
#56
0#
#57
1#
1)
b11101001 *
b11101001 +
0,
b00100001 -
#58
0#
#59
1#
0)
b01110100 *
b01110100 +
b00110000 -
#60
0#
#61
1#
b00111010 *
b00111010 +
#62
0#
#63
1#
1)
b00011101 *
b00011101 +
b00010001 -
#64
0#
#65
1#
0)
b00001110 *
b00001110 +
b00000000 -
#66
0#
#67
1#
1)
b00000111 *
b00000111 +
1,
b00000001 -
#68
0#
#69
1#
b10000011 *
b10000011 +
