$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 5 clk $end
  $var wire 1 6 rst_n $end
  $var wire 1 7 wr_en $end
  $var wire 1 8 rd_en $end
  $var wire 8 9 din [7:0] $end
  $var wire 8 : dout [7:0] $end
  $var wire 1 ; full $end
  $var wire 1 < empty $end
  $scope module fifo $end
   $var wire 32 = DATA_WIDTH [31:0] $end
   $var wire 32 > FIFO_DEPTH [31:0] $end
   $var wire 32 ? ADDR_WIDTH [31:0] $end
   $var wire 1 5 clk $end
   $var wire 1 6 rst_n $end
   $var wire 1 7 wr_en $end
   $var wire 1 8 rd_en $end
   $var wire 8 9 din [7:0] $end
   $var wire 8 : dout [7:0] $end
   $var wire 1 ; full $end
   $var wire 1 < empty $end
   $var wire 8 # mem[0] [7:0] $end
   $var wire 8 $ mem[1] [7:0] $end
   $var wire 8 % mem[2] [7:0] $end
   $var wire 8 & mem[3] [7:0] $end
   $var wire 8 ' mem[4] [7:0] $end
   $var wire 8 ( mem[5] [7:0] $end
   $var wire 8 ) mem[6] [7:0] $end
   $var wire 8 * mem[7] [7:0] $end
   $var wire 8 + mem[8] [7:0] $end
   $var wire 8 , mem[9] [7:0] $end
   $var wire 8 - mem[10] [7:0] $end
   $var wire 8 . mem[11] [7:0] $end
   $var wire 8 / mem[12] [7:0] $end
   $var wire 8 0 mem[13] [7:0] $end
   $var wire 8 1 mem[14] [7:0] $end
   $var wire 8 2 mem[15] [7:0] $end
   $var wire 5 3 wr_ptr [4:0] $end
   $var wire 5 4 rd_ptr [4:0] $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000 #
b00000000 $
b00000000 %
b00000000 &
b00000000 '
b00000000 (
b00000000 )
b00000000 *
b00000000 +
b00000000 ,
b00000000 -
b00000000 .
b00000000 /
b00000000 0
b00000000 1
b00000000 2
b00000 3
b00000 4
05
06
07
08
b00000000 9
b00000000 :
0;
1<
b00000000000000000000000000001000 =
b00000000000000000000000000010000 >
b00000000000000000000000000000100 ?
#1
15
#2
05
16
17
b00000001 9
#3
b00000001 #
b00001 3
15
0<
#4
05
b00100011 9
#5
b00100011 $
b00010 3
15
#6
05
b01000101 9
#7
b01000101 %
b00011 3
15
#8
05
b01100111 9
#9
b01100111 &
b00100 3
15
#10
05
b10001001 9
#11
b10001001 '
b00101 3
15
#12
05
b10101011 9
#13
b10101011 (
b00110 3
15
#14
05
b11001101 9
#15
b11001101 )
b00111 3
15
#16
05
b11101111 9
#17
b11101111 *
b01000 3
15
#18
05
b00010010 9
#19
b00010010 +
b01001 3
15
#20
05
b00110100 9
#21
b00110100 ,
b01010 3
15
#22
05
07
18
#23
b00001 4
15
b00000001 :
#24
05
#25
b00010 4
15
b00100011 :
#26
05
#27
b00011 4
15
b01000101 :
#28
05
#29
b00100 4
15
b01100111 :
#30
05
#31
b00101 4
15
b10001001 :
#32
05
#33
b00110 4
15
b10101011 :
#34
05
#35
b00111 4
15
b11001101 :
#36
05
#37
b01000 4
15
b11101111 :
#38
05
#39
b01001 4
15
b00010010 :
#40
05
#41
b01010 4
15
b00110100 :
1<
#42
b00000 3
b00000 4
05
06
b00000000 :
#43
15
#44
05
16
17
08
b00000000 9
#45
b00000000 #
b00001 3
15
0<
#46
05
b00000001 9
#47
b00000001 $
b00010 3
15
#48
05
b00000010 9
#49
b00000010 %
b00011 3
15
#50
05
b00000011 9
#51
b00000011 &
b00100 3
15
#52
05
b00000100 9
#53
b00000100 '
b00101 3
15
#54
05
b00000101 9
#55
b00000101 (
b00110 3
15
#56
05
b00000110 9
#57
b00000110 )
b00111 3
15
#58
05
b00000111 9
#59
b00000111 *
b01000 3
15
#60
05
b00001000 9
#61
b00001000 +
b01001 3
15
#62
05
b00001001 9
#63
b00001001 ,
b01010 3
15
#64
05
b00001010 9
#65
b00001010 -
b01011 3
15
#66
05
b00001011 9
#67
b00001011 .
b01100 3
15
#68
05
b00001100 9
#69
b00001100 /
b01101 3
15
#70
05
b00001101 9
#71
b00001101 0
b01110 3
15
#72
05
b00001110 9
#73
b00001110 1
b01111 3
15
#74
05
b00001111 9
#75
b00001111 2
b10000 3
15
1;
