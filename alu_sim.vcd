$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 + clk $end
  $var wire 1 , rst_n $end
  $var wire 8 - a [7:0] $end
  $var wire 8 . b [7:0] $end
  $var wire 3 / op_code [2:0] $end
  $var wire 8 0 result [7:0] $end
  $var wire 1 1 zero_flag $end
  $var wire 1 2 overflow_flag $end
  $scope module alu $end
   $var wire 32 6 DATA_WIDTH [31:0] $end
   $var wire 32 7 OP_WIDTH [31:0] $end
   $var wire 1 + clk $end
   $var wire 1 , rst_n $end
   $var wire 8 - a [7:0] $end
   $var wire 8 . b [7:0] $end
   $var wire 3 / op_code [2:0] $end
   $var wire 8 0 result [7:0] $end
   $var wire 1 1 zero_flag $end
   $var wire 1 2 overflow_flag $end
   $var wire 3 8 ADD [2:0] $end
   $var wire 3 9 SUB [2:0] $end
   $var wire 3 : AND [2:0] $end
   $var wire 3 ; OR [2:0] $end
   $var wire 3 < XOR [2:0] $end
   $var wire 3 = SHL [2:0] $end
   $var wire 3 > SHR [2:0] $end
   $var wire 3 ? CMP [2:0] $end
   $var wire 8 # add_result [7:0] $end
   $var wire 8 $ sub_result [7:0] $end
   $var wire 8 % and_result [7:0] $end
   $var wire 8 & or_result [7:0] $end
   $var wire 8 ' xor_result [7:0] $end
   $var wire 8 ( shl_result [7:0] $end
   $var wire 8 ) shr_result [7:0] $end
   $var wire 8 * cmp_result [7:0] $end
   $var wire 9 3 add_temp [8:0] $end
   $var wire 1 4 add_overflow $end
   $var wire 1 5 sub_overflow $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000 #
b00000000 $
b00000000 %
b00000000 &
b00000000 '
b00000000 (
b00000000 )
b00000001 *
0+
0,
b00000000 -
b00000000 .
b000 /
b00000000 0
01
02
b000000000 3
04
05
b00000000000000000000000000001000 6
b00000000000000000000000000000011 7
b000 8
b001 9
b010 :
b011 ;
b100 <
b101 =
b110 >
b111 ?
#1
1+
#2
b00011110 #
b11110110 $
b00011110 &
b00011110 '
b10100000 (
b00000000 *
0+
1,
b00001010 -
b00010100 .
b000011110 3
#3
1+
b00011110 0
#4
0+
#5
1+
#6
b00101100 #
b01100100 $
b01000000 %
b11101100 &
b10101100 '
b10000000 (
b00001100 )
0+
b11001000 -
b01100100 .
b100101100 3
14
15
#7
1+
b00101100 0
12
#8
0+
#9
1+
#10
b00000000 #
b00000000 $
b00000000 %
b00000000 &
b00000000 '
b00000000 (
b00000000 )
b00000001 *
0+
b00000000 -
b00000000 .
b000000000 3
04
05
#11
1+
b00000000 0
11
02
#12
0+
#13
1+
#14
b00101000 #
b00010100 $
b00001010 %
b00011110 &
b00010100 '
b01111000 (
b00000111 )
b00000000 *
0+
b00011110 -
b00001010 .
b001 /
b000101000 3
#15
1+
b00010100 0
01
#16
0+
#17
1+
#18
b11101100 $
b10000000 (
b00000000 )
0+
b00001010 -
b00011110 .
#19
1+
b11101100 0
#20
0+
#21
1+
#22
b10000001 #
b01111111 $
b00000000 %
b10000001 &
b10000001 '
b00000000 (
b01000000 )
0+
b10000000 -
b00000001 .
b010000001 3
15
#23
1+
b01111111 0
12
#24
0+
#25
1+
#26
b00001110 #
b11110000 $
b00001111 %
b11111111 &
b11110000 '
b10000000 (
b00000001 )
0+
b11111111 -
b00001111 .
b010 /
b100001110 3
14
05
#27
1+
b00001111 0
02
#28
0+
#29
1+
#30
b11111111 #
b00000001 $
b00000000 %
b11111111 '
b00000000 (
b00000000 )
0+
b00000000 -
b11111111 .
b011111111 3
04
#31
1+
b00000000 0
11
#32
0+
#33
1+
#34
b11100001 $
b00000001 )
0+
b11110000 -
b00001111 .
b011 /
#35
1+
b11111111 0
01
#36
0+
#37
1+
#38
b00000000 #
b00000000 $
b00000000 &
b00000000 '
b00000000 )
b00000001 *
0+
b00000000 -
b00000000 .
b000000000 3
#39
1+
b00000000 0
11
#40
0+
#41
1+
#42
b00001110 #
b11110000 $
b00001111 %
b11111111 &
b11110000 '
b10000000 (
b00000001 )
b00000000 *
0+
b11111111 -
b00001111 .
b100 /
b100001110 3
14
#43
1+
b11110000 0
01
#44
0+
#45
1+
#46
b11111110 #
b00000000 $
b11111111 %
b00000000 '
b00000001 *
0+
b11111111 .
b111111110 3
#47
1+
b00000000 0
11
#48
0+
#49
1+
#50
b00000010 #
b00000001 %
b00000001 &
b00000010 (
b00000000 )
0+
b00000001 -
b00000001 .
b101 /
b000000010 3
04
#51
1+
b00000010 0
01
#52
0+
#53
1+
#54
b00001000 #
b11111010 $
b00000111 &
b00000110 '
b10000000 (
b00000000 *
0+
b00000111 .
b000001000 3
#55
1+
b10000000 0
#56
0+
#57
1+
#58
b10000001 #
b01111111 $
b00000000 %
b10000001 &
b10000001 '
b00000000 (
b01000000 )
0+
b10000000 -
b00000001 .
b110 /
b010000001 3
15
#59
1+
b01000000 0
#60
0+
#61
1+
#62
b10000111 #
b01111001 $
b10000111 &
b10000111 '
b00000001 )
0+
b00000111 .
b010000111 3
#63
1+
b00000001 0
#64
0+
#65
1+
#66
b10101010 #
b00000000 $
b01010101 %
b01010101 &
b00000000 '
b10100000 (
b00000010 )
b00000001 *
0+
b01010101 -
b01010101 .
b111 /
b010101010 3
05
#67
1+
#68
0+
#69
1+
#70
b11111111 #
b10101011 $
b00000000 %
b11111111 &
b11111111 '
b01010100 (
b00010101 )
b00000000 *
0+
b10101010 .
b011111111 3
15
#71
1+
b00000000 0
11
#72
0+
#73
1+
